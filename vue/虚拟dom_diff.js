/*
*******************虚拟dom******************

什么是虚拟dom？
虚拟dom是对DOM的抽象,本质上是用”JS对象“去实现一个DOM节点,它比创建一个DOM的代价要小很多。

为什么使用虚拟dom？
属于前端性能优化的一种，前端优化首先就要少操作dom，不仅仅是dom操作比较慢这样，还有频繁操作dom会造成浏览器重绘或回流，
当多次更新dom时，并不会立即更新dom，而是将变化保存到对象中，最终一次性更新到dom上。

虚拟dom的关键要素？
创建 - 渲染 - 更新

dom diff过程？双指针算法
1. 用JS对象模拟DOM（虚拟DOM）
2. 把虚拟DOM转成真实DOM并插入页面中（render）
3. 如果有事件发生修改了虚拟DOM，比较两棵虚拟DOM树的差异，得到差异对象（diff）
4. 把差异对象应用到真正的DOM树上（patch）

什么是diff算法？
diff算法是通过同层节点进行比较，找出差异并更新，是一个层层递进的过程。
// diff算法的目的就是比较新旧虚拟dom树，找出差异并更新.

新旧节点对比方式？
1. 头头对比
2. 尾尾对比
3. 旧尾新头对比
4. 旧头新尾对比

对比到key相同的，头指针就往后移动一位，尾指针就往前移动一位，在进行下一轮的头尾互相对比，直到某一个列表的节点全部遍历过，对比停止。

for循环的key
key其实就是diff算法的“就地复用”原则，当tag和key一样的时候就采用“就地复用”。
当for循环使用key，增加或者删除，会同级别的对比tag和key，只会更新那些修改的值。
如果不用key，那么key就是undefined，还会采用就地复用原则，就会渲染好多次，造成了没必要的性能损耗。

*/